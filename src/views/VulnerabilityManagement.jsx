
// import React from "react";
// // react plugin used to create google maps
// import {
//   withScriptjs,
//   withGoogleMap,
//   GoogleMap,
//   Marker,
//   Card,
//   CardHeader,
//   CardBody,
//   CardTitle,
//   Table,
//   Row,
//   Col,
//   Modal, 
//   ModalHeader,
//   ModalBody, 
//   ModalFooter,
//   Button

// } from "reactstrap";

// class Tables extends React.Component {
//   constructor(props) {
//     super(props);
//     this.state = {
//       fetchedData: "",
//       scanResults1: '',
//       scanResults2: '',
//       scanResults3: '',
//       scanResults4: '',
//       selectedTupleScanResults: '',
//       modal: false
//     }
//   }
//   selectedIpResult;
//   selectedIpTuple;
//   selectedTupleScanResults;
//   componentDidMount = async () => {
//     let requireData = JSON.stringify({

//       "namespace": "edm2019",

//     });
//     const settings = {
//       method: 'POST',
//       headers: {
//         Accept: 'application/json',
//         'Content-Type': 'application/json',
//       },
//       body: requireData
//     };
//     const data = await fetch('https://enterprise.gydpost.com/get/vuln', settings)
//       .then(response => response.json())
//       .then(json => {
//         this.setState({ fetchedData: json });


//         return json;
//       })
//       .catch(e => {
//         return e
//       });
//     return data;
//   }

//   selectedIp=(ip)=>{
//     this.selectedIpResult = ip;
//     for(var i =0; i< this.state.fetchedData.length;i++) {
//         if(this.state.fetchedData[i].ip == this.selectedIpResult) {
//             this.selectedIpTuple = this.state.fetchedData[i];
//             console.log("Selected Tuple: ", this.selectedIpTuple);
//             this.setState({selectedTupleScanResults: this.selectedIpTuple.scan_results})  
//             this.setState({modal: true});
//             console.log("Selected Tuple scan Results: ", this.state.selectedTupleScanResults && this.state.selectedTupleScanResults);
//         }
//     }
//   }
//   closeModal=()=>{
//     this.setState({modal: false});
//   }
//   render() {
//     console.log("Fetched: ", this.state.fetchedData);
//     const selectedTupleScanResults = this.state.selectedTupleScanResults && this.state.selectedTupleScanResults.map((data, index)=>{
//       return(
//         <Row key={Math.random()}>
//           <Col sm="12">
//             <p>ID: {data.id}</p>
//           </Col>
//           <Col sm="12">
//             <p>
//               Description: {data.desc}
//             </p>
//           </Col>
//         </Row>
//       );
//     })


//     const rightCards = this.state.fetchedData && this.state.fetchedData.map((data, index) => {
//       return (

//         <Col md="12" key={Math.random()}>
//           <Card  onClick={()=>this.selectedIp(data.ip)}>


//             <CardBody>
//             {data.ip}
//             </CardBody>
//           </Card>
//         </Col>



//       );
//     })
//     return (
//       <>
//         <div className="content">



//           <Card className="top-card">
//             <Row>
//               <Col sm={12} className="text-center">
//                 Vulnerability Management
//               </Col>
//             </Row>
//           </Card>
//           <Row className="container">
//             <Col sm={{ offset: 10, size: 2 }}>
//               <select className="select-button">
//                 <option>
//                   Sort by: Time
//               </option>
//               </select>
//             </Col>

//           </Row>
//           <Row>
//             <Col md="12">
//               <Card className="card-plain">
//                 <CardHeader>
//                   <CardTitle tag="h4">List of all the data </CardTitle>
//                   <p className="category">............</p>
//                 </CardHeader>
//                 <CardBody>
//                 {rightCards}

//                 </CardBody>
//               </Card>
//             </Col>


//           </Row>
//           <Modal isOpen={this.state.modal} >
//             <ModalHeader toggle={this.toggle}>Scan Results</ModalHeader>
//             <ModalBody style={{height: "300px", overflow: "scroll"}}>
//               {this.state.selectedTupleScanResults && this.state.selectedTupleScanResults.length > 0 ?
//               selectedTupleScanResults
//               : 'No Scan Results Found'
//               }
//             </ModalBody>
//             <ModalFooter>
//               <Button onClick={this.closeModal}>Close</Button>
//             </ModalFooter>
//           </Modal>
//         </div>
//       </>
//     );
//   }
// }

// export default Tables;



// import React from "react";
// // react plugin used to create google maps
// import {
//   withScriptjs,
//   withGoogleMap,
//   GoogleMap,
//   Marker,
//   Card,
//   CardHeader,
//   CardBody,
//   CardTitle,
//   Table,
//   Row,
//   Col,
//   Modal, 
//   ModalHeader,
//   ModalBody, 
//   ModalFooter,
//   Button

// } from "reactstrap";

// class VulnerabilityManagement extends React.Component {
//   constructor(props) {
//     super(props);
//     this.state = {
//       fetchedData: "",
//       scanResults1: '',
//       scanResults2: '',
//       scanResults3: '',
//       scanResults4: '',
//       selectedTupleScanResults: '',
//       modal: false
//     }
//   }
//   selectedIpResult;
//   selectedIpTuple;
//   selectedTupleScanResults;
//   componentDidMount = async () => {
//     let requireData = JSON.stringify({

//       "namespace": "edm2019",

//     });
//     const settings = {
//       method: 'POST',
//       headers: {
//         Accept: 'application/json',
//         'Content-Type': 'application/json',
//       },
//       body: requireData
//     };
//     const data = await fetch('https://enterprise.gydpost.com/get/vuln', settings)
//       .then(response => response.json())
//       .then(json => {
//         this.setState({ fetchedData: json });


//         return json;
//       })
//       .catch(e => {
//         return e
//       });
//     return data;
//   }

//   selectedIp=(ip)=>{
//     this.selectedIpResult = ip;
//     for(var i =0; i< this.state.fetchedData.length;i++) {
//         if(this.state.fetchedData[i].ip == this.selectedIpResult) {
//             this.selectedIpTuple = this.state.fetchedData[i];
//             console.log("Selected Tuple: ", this.selectedIpTuple);
//             this.setState({selectedTupleScanResults: this.selectedIpTuple.scan_results})  
//             this.setState({modal: true});
//             console.log("Selected Tuple scan Results: ", this.state.selectedTupleScanResults && this.state.selectedTupleScanResults);
//         }
//     }
//   }
//   closeModal=()=>{
//     this.setState({modal: false});
//   }
//   render() {
//     console.log("Fetched: ", this.state.fetchedData);
//     const selectedTupleScanResults = this.state.selectedTupleScanResults && this.state.selectedTupleScanResults.map((data, index)=>{
//       return(
//         <Row key={Math.random()}>
//           <Col sm="12">
//             <p>ID: {data.id}</p>
//           </Col>
//           <Col sm="12">
//             <p>
//               Description: {data.desc}
//             </p>
//           </Col>
//         </Row>
//       );
//     })


//     const rightCards = this.state.fetchedData && this.state.fetchedData.map((data, index) => {
//       return (

//         <Col md="12" key={Math.random()}>
//           <Card  onClick={()=>this.selectedIp(data.ip)}>
//             <CardHeader>
//               <CardTitle>

//                 {data.ip}

//               </CardTitle>
//             </CardHeader>
//             <CardBody>
//             </CardBody>
//           </Card>
//         </Col>
//       );
//     })
//     return (
//       <>
//         <div className="content">



//           <Card className="top-card">
//             <Row>
//               <Col sm={12} className="text-center">
//                 Vulnerability Management
//               </Col>
//             </Row>
//           </Card>
//           <Row className="container">
//             <Col sm={{ offset: 10, size: 2 }}>
//               <select className="select-button">
//                 <option>
//                   Sort by: Time
//               </option>
//               </select>
//             </Col>

//           </Row>
//           <Row>
//             <Col md="12">
//               <Card className="card-plain">
//                 <CardHeader>
//                   <CardTitle tag="h4">List of all the data </CardTitle>
//                   <p className="category">............</p>
//                 </CardHeader>
//                 <CardBody>
//                 {rightCards}

//                 </CardBody>
//               </Card>
//             </Col>
//           </Row>
//           {/* <Modal isOpen={this.state.modal} >
//             <ModalHeader toggle={this.toggle}>Scan Results</ModalHeader>
//             <ModalBody style={{height: "300px", overflow: "scroll"}}>
//               {this.state.selectedTupleScanResults && this.state.selectedTupleScanResults.length > 0 ?
//               selectedTupleScanResults
//               : 'No Scan Results Found'
//               }
//             </ModalBody>
//             <ModalFooter>
//               <Button onClick={this.closeModal}>Close</Button>
//             </ModalFooter>
//           </Modal> */}
//           <div className="container" >
//             <div className="card container" style={{margin: "0 5px 0 25px"}}>
//             <div className="card-header">
//               Scan Result
//             </div>
//             <div className="card-body" style={{margin: "0 5px 0 25px", height: "350px", overflow: "scroll"}}>
//               {this.state.selectedTupleScanResults && this.state.selectedTupleScanResults.length > 0 ?
//                   selectedTupleScanResults
//                   : 'No Scan Results Found'
//                   }
//             </div>

//             </div>
//           </div>
//         </div>
//       </>
//     );
//   }
// }

// export default VulnerabilityManagement;

// import React from "react";
// // react plugin used to create google maps
// import {
//   withScriptjs,
//   withGoogleMap,
//   GoogleMap,
//   Marker,
//   Card,
//   CardHeader,
//   CardBody,
//   CardTitle,
//   Table,
//   Row,
//   Col,
//   Modal,
//   ModalHeader,
//   ModalBody,
//   ModalFooter,
//   Button

// } from "reactstrap";

// class VulnerabilityManagement extends React.Component {
//   constructor(props) {
//     super(props);
//     this.state = {
//       fetchedData: "",
//       scanResults1: '',
//       scanResults2: '',
//       scanResults3: '',
//       scanResults4: '',
//       selectedTupleScanResults: '',
//       modal: false
//     }
//   }
//   selectedIpResult;
//   selectedIpTuple;
//   selectedTupleScanResults;
//   componentDidMount = async () => {
//     let requireData = JSON.stringify({

//       "namespace": "edm2019",

//     });
//     const settings = {
//       method: 'POST',
//       headers: {
//         Accept: 'application/json',
//         'Content-Type': 'application/json',
//       },
//       body: requireData
//     };
//     const data = await fetch('https://enterprise.gydpost.com/get/vuln', settings)
//       .then(response => response.json())
//       .then(json => {
//         this.setState({ fetchedData: json });


//         return json;
//       })
//       .catch(e => {
//         return e
//       });
//     return data;
//   }

//   selectedIp = (ip) => {
//     this.selectedIpResult = ip;
//     for (var i = 0; i < this.state.fetchedData.length; i++) {
//       if (this.state.fetchedData[i].ip == this.selectedIpResult) {
//         this.selectedIpTuple = this.state.fetchedData[i];
//         console.log("Selected Tuple: ", this.selectedIpTuple);
//         this.setState({ selectedTupleScanResults: this.selectedIpTuple.scan_results })
//         this.setState({ modal: true });
//         console.log("Selected Tuple scan Results: ", this.state.selectedTupleScanResults && this.state.selectedTupleScanResults);
//       }
//     }
//   }
//   closeModal = () => {
//     this.setState({ modal: false });
//   }
//   render() {
//     console.log("Fetched: ", this.state.fetchedData);
//     const selectedTupleScanResults = this.state.selectedTupleScanResults && this.state.selectedTupleScanResults.map((data, index) => {
//       return (
//         <Row key={Math.random()}>
//           <Card style={{ border: "1px solid grey", margin: "10px 0 0 0" }}>
//             <Col sm="12">
//               <p>ID: {data.id}</p>
//               <p>
//                 Description: {data.desc}
//               </p>
//             </Col>
//           </Card>
//         </Row>
//       );
//     })


//     const rightCards = this.state.fetchedData && this.state.fetchedData.map((data, index) => {
//       return (

//         <option value={data.ip} key={Math.random()}>
//           {data.ip}
//         </option>

//       );
//     })
//     return (
//       <>
//         <div className="content">
//           <Card className="top-card">
//             <Row>
//               <Col sm={12} className="text-center">
//                 Vulnerability Management
//               </Col>
//             </Row>
//           </Card>
//           <Card className="second-card">
//             <Row>
//               <Col sm="3">
//                 {/* <Button color="success">My Preferences</Button>{' '} */}
//               </Col>
//               <Col sm="3">
//               <select className="form-control" onChange={this.selectedIp} value={this.selectedIpResult}>
//                 {rightCards}
//               </select>


//               </Col>


//               <Col sm="3">
//                 <Button color="warning" className="animation-on-hover" onClick={this.mySearch}>
//                   Search
//                         </Button>{' '}


//               </Col>
//           </Row>
//          </Card>
//          <Col md="12">
//                             <Card className="card-chart">
//                                 <CardHeader>
//                                     <h5 className="card-category">Scan results</h5>
//                                     <CardTitle tag="h3">
//                                         <i className="tim-icons icon-delivery-fast text-primary" />{"Total "}
//                                     </CardTitle>
//                                 </CardHeader>
//                                 <CardBody>
//                                 <div className="card-body" style={{ margin: "0 5px 0 25px", height: "350px", overflow: "scroll" }}>
//                 {this.state.selectedTupleScanResults && this.state.selectedTupleScanResults.length > 0 ?
//                   selectedTupleScanResults
//                   : 'No Scan Results Found'
//                 }
//               </div>

//                                 </CardBody>
//                             </Card>
//                         </Col>

//         </div>
//       </>
//     );
//   }
// }

// export default VulnerabilityManagement;


import React from "react";
// react plugin used to create google maps
import {
  withScriptjs,
  withGoogleMap,
  GoogleMap,
  Marker,
  Card,
  CardHeader,
  CardBody,
  CardTitle,
  Table,
  Row,
  Col,
  Modal,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Button

} from "reactstrap";

class VulnerabilityManagement extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      fetchedData: "",
      scanResults1: '',
      scanResults2: '',
      scanResults3: '',
      scanResults4: '',
      selectedTupleScanResults: '',
      modal: false
    }
  }
  selectedIpResult;
  selectedIpTuple;
  selectedTupleScanResults;
  componentDidMount = async () => {
    let requireData = JSON.stringify({

      "namespace": "edm2019",

    });
    const settings = {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
      body: requireData
    };
    const data = await fetch('https://enterprise.gydpost.com/get/vuln', settings)
      .then(response => response.json())
      .then(json => {
        this.setState({ fetchedData: json });


        return json;
      })
      .catch(e => {
        return e
      });
    return data;
  }

  selectedIp = (ip) => {
    this.selectedIpResult = ip.target.value;
    console.log("Selected Ip: ", this.selectedIpResult);

    for (var i = 0; i < this.state.fetchedData.length; i++) {
      if (this.state.fetchedData[i].ip == this.selectedIpResult) {
        this.selectedIpTuple = this.state.fetchedData[i];
        console.log("Selected Tuple: ", this.selectedIpTuple);
        this.setState({ selectedTupleScanResults: this.selectedIpTuple.scan_results })
        this.setState({ modal: true });
        console.log("Selected Tuple scan Results: ", this.state.selectedTupleScanResults && this.state.selectedTupleScanResults);
      }
    }
  }
  closeModal = () => {
    this.setState({ modal: false });
  }
  render() {
    console.log("Fetched: ", this.state.fetchedData);
    const selectedTupleScanResults = this.state.selectedTupleScanResults && this.state.selectedTupleScanResults.map((data, index) => {
      return (
        <Row key={Math.random()}>
          <Card style={{ border: "1px solid grey", margin: "10px 0 0 0" }}>
            <Col sm="12">
              <p>ID: {data.id}</p>
              <p>
                Description: {data.desc}
              </p>
            </Col>
          </Card>
        </Row>
      );
    })


    const rightCards = this.state.fetchedData && this.state.fetchedData.map((data, index) => {
      return (

        <option value={data.ip} key={Math.random()}>
          {data.ip} &nbsp;&nbsp; ({data.hostname})
        </option>

      );
    })
    return (
      <>
        <div className="content">



          <Card className="top-card">
            <Row>
              <Col sm={12} className="text-center" style={{ fontSize: "16px", fontWeight: "bold", color: 'white' }}>
                Vulnerability Management
              </Col>
            </Row>
          </Card>


          <Card className="second-card">
            <Row>
              <Col sm="3">
                {/* <Button color="success">My Preferences</Button>{' '} */}
              </Col>
              <Col sm="3">

                <select className="selected-button" onChange={this.selectedIp} value={this.selectedIpResult}>
                  <option value=" Country">
                    Select Machine
               </option>
                  {rightCards}


                </select>
              </Col>



            </Row>
          </Card>
          {/* <Row className="container">
            <Col sm={{ offset: 10, size: 2 }}>
              <select className="select-button">
                <option>
                  Sort by: Time
              </option>
              </select>
            </Col>

          </Row> */}
          <Row>
            <Col md="12">
              <Card className="card-chart">

                <CardHeader>
                  <h6 className="title d-inline" style={{ fontSize: "16px", fontWeight: "bold", color: '#00aeff' }}>Scan Results</h6>
                  <p className="card-category d-inline"> </p>
                  <CardTitle tag="h6" style={{ fontWeight: "bold" }}>
                    {""}
                  </CardTitle>
                </CardHeader>





                <CardBody>
                  <div style={{ margin: "0 5px 0 25px", height: "350px", overflow: "scroll" }}  >
                    {this.state.selectedTupleScanResults && this.state.selectedTupleScanResults.length > 0 ?
                      selectedTupleScanResults
                      : 'No Scan Results Found'
                    }
                  </div>
                </CardBody>
              </Card>
            </Col>

          </Row>

        </div>
      </>
    );
  }
}

export default VulnerabilityManagement;



